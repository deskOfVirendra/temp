# -*- coding: utf-8 -*-
"""Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Ap5QeRa99Af_GUXA3IpCJdimB0lGj5X
"""

from math import sqrt
import matplotlib.pyplot as plt
import numpy as np

class LinearRegression:

  # Constructor
  def __init__(self, X, Y): 
    c,m = self.training(X,Y)
    r2 = self.get_r2_score(X,Y,c,m)
    self.plot_graph(X,Y,c,m)


   # Fitting the regression line
  def training(self, X, Y):
    # Compute m
    m_numerator = 0
    m_denominator = 0
    x_mean = sum(X)/len(X)
    y_mean = sum(Y)/len(Y)
    for x,y in zip(X,Y):
      m_numerator = m_numerator + (x-x_mean)*(y-y_mean)
      m_denominator = m_denominator + (x-x_mean)*(x-x_mean)
    m = m_numerator/m_denominator
    
    # Compute c
    c = y_mean-m*x_mean
    
    # Weight Quantization
    c, m = round(c,2), round(m,2)

    print("Regression Line Equation : y = {c} + {m}*x".format(c=c,m=m))
    
    # Return Coefficients
    return c, m
  

  # Compute R2 Score
  def get_r2_score(self, X, Y, c, m):

    print('\nR2 Score\n===========')
    
    R2_num = 0 # Residual Sum of Squares
    R2_den = 0 # Total Sum of Squares
    y_mean = sum(Y)/len(Y)
    for x,y in zip(X,Y):
      y_pred = c+m*x
      R2_num += ( (y-y_pred)*(y-y_pred) )
      R2_den += ( (y-y_mean)*(y-y_mean) )
    r2 = 1 - (R2_num/R2_den)
    print('R2 Score  = ',r2)

    return r2


  def plot_graph(self,X,Y,c,m):

    import matplotlib.pyplot as plt

    print('\nPlot Graph\n===========')
    
    plt.scatter(X,Y, s=30)
    Y_pred = []
    for x,y in zip(X,Y):
      Y_pred.append(c+m*x)
      plt.annotate((x,y), (x, y))
    plt.plot(X,Y_pred, c='g')
    plt.xlabel("Number of hours spent driving (x)")
    plt.ylabel("Risk Score on a scale of 0-100 (y)")
    plt.show()

# Datapoints for supervisory learning
X = np.array([10, 9, 2, 15, 10, 16, 11, 16])
Y = np.array([95, 80, 10, 50, 45, 98, 38, 93])

LR = LinearRegression(X,Y)